package pattern

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Strategy_pattern
*/

/*
	Применимость:
	- Необходимость выполнять одни и те же действия, но с разным алгоритмом
	в некоторых операциях
	- Необходимость менять алгоритм работы операции в зависимости от других факторов
	внутри системы

	Плюсы:
	- Контекст не обязан реализовывать все возможные алгоритмы и сужает свою
	зону ответственности, что помогает придерживаться принципа единственной ответственности
	- Позволяет снять ответственность за выбор нужного алгоритма с клиента

	Минусы:
	- В отличии от шаблона "State" нет возможность менять через стратегию состояние контекста
	- При изменении одной операции возможно менять все стратегии
	- Возможности действий стратегии ограничены контрактом с операцией, поэтому
	любого выхода за рамки потребуют отказа от шаблона в конкретном месте и дублированию кода

	Реальные примеры:
	- Структура, которая производит валидацию данных, может менять алгоритм
	валидации в зависимости от выбранной стратегии
*/

// Context контекст исполняемой стратегии
type Context struct {
	strategy Strategy
}

// Operation метод исполнитель стратегии
func (c *Context) Operation() {
	c.strategy.Algorithm()
}

// Strategy описывающий стратегию
type Strategy interface {
	Algorithm()
}

// Strategy1 реализация конкретной стратегии
type Strategy1 struct {
}

// Algorithm метод стратегии Strategy1
func (_ *Strategy1) Algorithm() {}

// Strategy2 реализация конкретной стратегии
type Strategy2 struct {
}

// Algorithm метод стратегии Strategy1
func (_ *Strategy2) Algorithm() {}
