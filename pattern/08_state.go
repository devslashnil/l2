package pattern

/*
	Реализовать паттерн «состояние».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/State_pattern
*/

/*
	Применимость:
	- Поведение структуры зависит от её состояния
	- Поведение структуры меняется во время выполнения программы
	- Состояний много и использовать условные операторы затруднительно

	Плюсы:
	- В отличие от стратегии имеется возможность манипулировать внутренним
	состоянием контекста из структур состояния
	- Удобство при реализации структуры схожей с конечным автоматом, т.к. уровней
	вложенности будет меньше чем через if

	Минусы:
	- Для поддержки сложной структуры желательно иметь изображение с диаграммой для снижения
	когнитивной нагрузки на разработчика, при изменении кода придётся изменять и диаграмму

	Реальные примеры:
	- Структура определяющая статус/состояние чего-либо и использующая не последовательные переходы
	между состояниями
*/

// StateContext контекст в котором существует состояние
type StateContext struct {
	state State
}

// SetState задает состояние контекста
func (c *StateContext) SetState(state State) {
	c.state = state
}

// Request операция контекста зависимая от состояния
func (c *StateContext) Request() {
	c.state.Handle(c)
}

// State интерфейс состояния
type State interface {
	Handle(c *StateContext)
}

// State1 первое состояние
type State1 int

// Handle переводит контекст в состояние State2
func (_ State1) Handle(c *StateContext) {
	c.SetState(State2(2))
}

// State2 второе состояние
type State2 int

// Handle переводит контекст в состояние State1
func (_ State2) Handle(c *StateContext) {
	c.SetState(State1(1))
}
