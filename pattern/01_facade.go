package pattern

/*
	Реализовать паттерн «фасад».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Facade_pattern
*/

/*
	Применимость:
	- Нужен простой интерфейс к сложной системе из множества структур
	- Работа с подструктурами сильно связана между собой

	Плюсы:
	- Один интерфейс для работы со многими подструктурами, что упрощает работу с ними
	- Меньшая зависимость от подструктур, работу с которыми берёт на себя фасад

	Минусы:
	- Новая абстракция в виде фасада, в случае отказов и сбоях работы подструктур могут
	возникнуть дополнительные сложности в отладке
	- Зависимость работы с подструктурами от фасада, прямое взаимодействие с подструктурой
	может быть не всегда возможно или приводить к трудноуловимым ошибкам
	- Большая зона ответственности фасада, т.к. он агрегирует в себе несколько структур,
	объединяя в себе их зоны ответственности, что может привести к разрастанию структуры, что ведёт
	за собой усложнение всей поддержки и нивелированию плюсов фасада.

	Реальные примеры:
	- Структура конкретного сервиса это фасад для других сервисов, а также структур репозитория, кэширования и т.д.
	- Структура Engine в Gin. Engine is the framework's instance, it contains the muxer,
	middleware and configuration settings.
*/

// Facade предоставляющий унифицированный доступ для структур SubSystem1, SubSystem2
type Facade struct {
	s1 SubSystem1
	s2 SubSystem2
}

// FooBar метод упрощает работу c Foo и Bar делегирую на себя ответственность за правильную работу с ними
func (f Facade) FooBar() {
	f.s1.Foo()
	f.s2.Bar()
}

// SubSystem1 специфичная структура о деталях работы которых пользователь структуры Facade может не знать
type SubSystem1 int

// SubSystem2 вторая структура которая часто используется вместе с SubSystem1, но
// для сохранения принципа единственной ответственности SOLID вынесена как отдельная сущность
type SubSystem2 int

// Foo метод со сложной логикой которую прячет Facade
func (_ SubSystem1) Foo() {}

// Bar метод со сложной логикой которую прячет Facade
func (_ SubSystem2) Bar() {}
